<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jaxws="http://cxf.apache.org/jaxws" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 引入dubbo的配置信息 -->
	<import resource="classpath*:spring/start-provider.xml"/>

	<!-- 启用注解 -->
	<context:annotation-config />

	<!-- 扫描包 -->
	<context:component-scan base-package="com.fish.user"/>
	<context:component-scan base-package="com.fish.shop"/>

	<!--开启切面代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>

	<context:property-placeholder location="classpath*:env/*.properties" ignore-unresolvable="true" order="1" file-encoding="UTF-8" />

	<!-- 引入数据源的配置信息 -->
	<import resource="classpath*:spring/spring-dao.xml"/>

<!--
	&lt;!&ndash; 引入TCC事务  &ndash;&gt;
	<import resource="classpath:tcc-transaction-dubbo.xml" />
	<import resource="classpath:tcc-transaction.xml" />

	&lt;!&ndash; tcc-transaction框架使用transactionRepository持久化事务日志。
	可以选择FileSystemTransactionRepository、SpringJdbcTransactionRepository、RedisTransactionRepository或ZooKeeperTransactionRepository。 &ndash;&gt;
	<bean id="transactionRepository" class="org.mengyun.tcctransaction.repository.RedisClusterTransactionRepository">
		<property name="keyPrefix" value="TCC:IDE:"/>
		<property name="jedisClusterExtend" ref="jedisClusterExtend"/>
	</bean>

	<bean id="jedisClusterExtend" class="org.mengyun.tcctransaction.repository.helper.JedisClusterExtend">
		<constructor-arg index="0" value="10.112.12.203:7000,10.112.12.203:7001,10.112.12.203:7002" type="java.lang.String"/>
		<constructor-arg index="1" ref="jedisPoolConfig"/>
	</bean>

	&lt;!&ndash; 配置JedisPoolConfig实例 &ndash;&gt;
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxTotal" value="${redis.pool.maxActive}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="false" />
	</bean>
-->

	<!-- 替换默认的TCC异常调度配置（可选） -->
	<!-- <bean id="defaultRecoverConfig" class="org.mengyun.tcctransaction.spring.recover.DefaultRecoverConfig">
        <property name="cronExpression" value="0 0 */1 * * ?"/>
    </bean> -->

</beans>